/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TrackService } from "../track.service";
import { TrackCreateInput } from "./TrackCreateInput";
import { Track } from "./Track";
import { TrackFindManyArgs } from "./TrackFindManyArgs";
import { TrackWhereUniqueInput } from "./TrackWhereUniqueInput";
import { TrackUpdateInput } from "./TrackUpdateInput";

export class TrackControllerBase {
  constructor(protected readonly service: TrackService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Track })
  async createTrack(@common.Body() data: TrackCreateInput): Promise<Track> {
    return await this.service.createTrack({
      data: {
        ...data,

        album: data.album
          ? {
              connect: data.album,
            }
          : undefined,

        artist: data.artist
          ? {
              connect: data.artist,
            }
          : undefined,
      },
      select: {
        album: {
          select: {
            id: true,
          },
        },

        artist: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        duration: true,
        id: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Track] })
  @ApiNestedQuery(TrackFindManyArgs)
  async tracks(@common.Req() request: Request): Promise<Track[]> {
    const args = plainToClass(TrackFindManyArgs, request.query);
    return this.service.tracks({
      ...args,
      select: {
        album: {
          select: {
            id: true,
          },
        },

        artist: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        duration: true,
        id: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Track })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async track(
    @common.Param() params: TrackWhereUniqueInput
  ): Promise<Track | null> {
    const result = await this.service.track({
      where: params,
      select: {
        album: {
          select: {
            id: true,
          },
        },

        artist: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        duration: true,
        id: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Track })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTrack(
    @common.Param() params: TrackWhereUniqueInput,
    @common.Body() data: TrackUpdateInput
  ): Promise<Track | null> {
    try {
      return await this.service.updateTrack({
        where: params,
        data: {
          ...data,

          album: data.album
            ? {
                connect: data.album,
              }
            : undefined,

          artist: data.artist
            ? {
                connect: data.artist,
              }
            : undefined,
        },
        select: {
          album: {
            select: {
              id: true,
            },
          },

          artist: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          duration: true,
          id: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Track })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTrack(
    @common.Param() params: TrackWhereUniqueInput
  ): Promise<Track | null> {
    try {
      return await this.service.deleteTrack({
        where: params,
        select: {
          album: {
            select: {
              id: true,
            },
          },

          artist: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          duration: true,
          id: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
