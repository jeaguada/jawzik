/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Artist as PrismaArtist,
  Album as PrismaAlbum,
  Track as PrismaTrack,
} from "@prisma/client";

export class ArtistServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ArtistCountArgs, "select">): Promise<number> {
    return this.prisma.artist.count(args);
  }

  async artists(args: Prisma.ArtistFindManyArgs): Promise<PrismaArtist[]> {
    return this.prisma.artist.findMany(args);
  }
  async artist(
    args: Prisma.ArtistFindUniqueArgs
  ): Promise<PrismaArtist | null> {
    return this.prisma.artist.findUnique(args);
  }
  async createArtist(args: Prisma.ArtistCreateArgs): Promise<PrismaArtist> {
    return this.prisma.artist.create(args);
  }
  async updateArtist(args: Prisma.ArtistUpdateArgs): Promise<PrismaArtist> {
    return this.prisma.artist.update(args);
  }
  async deleteArtist(args: Prisma.ArtistDeleteArgs): Promise<PrismaArtist> {
    return this.prisma.artist.delete(args);
  }

  async findAlbums(
    parentId: string,
    args: Prisma.AlbumFindManyArgs
  ): Promise<PrismaAlbum[]> {
    return this.prisma.artist
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .albums(args);
  }

  async findTracks(
    parentId: string,
    args: Prisma.TrackFindManyArgs
  ): Promise<PrismaTrack[]> {
    return this.prisma.artist
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .tracks(args);
  }
}
